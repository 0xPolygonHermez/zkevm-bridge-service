// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bridge

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// BridgeMetaData contains all meta data concerning the Bridge contract.
var BridgeMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"originNetwork\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"originTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"destinationNetwork\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destinationAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"depositCount\",\"type\":\"uint32\"}],\"name\":\"BridgeEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"originNetwork\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"originTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destinationAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"originNetwork\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"originTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wrappedTokenAddress\",\"type\":\"address\"}],\"name\":\"NewWrappedToken\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAINNET_NETWORK_ID\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"destinationNetwork\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"destinationAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"permitData\",\"type\":\"bytes\"}],\"name\":\"bridge\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"smtProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"mainnetExitRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"rollupExitRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"originNetwork\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"originTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"destinationNetwork\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"destinationAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimNullifier\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDepositRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"originNetwork\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"originTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"destinationNetwork\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"destinationAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"metadataHash\",\"type\":\"bytes32\"}],\"name\":\"getLeafValue\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"originNetwork\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"originTokenAddress\",\"type\":\"address\"}],\"name\":\"getTokenWrappedAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globalExitRootManager\",\"outputs\":[{\"internalType\":\"contractIGlobalExitRootManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_networkID\",\"type\":\"uint32\"},{\"internalType\":\"contractIGlobalExitRootManager\",\"name\":\"_globalExitRootManager\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"networkID\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"originNetwork\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"originTokenAddress\",\"type\":\"address\"}],\"name\":\"precalculatedWrapperAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"tokenInfoToWrappedToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"leafHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"smtProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"verifyMerkleProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"wrappedTokenToTokenInfo\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"originNetwork\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"originTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b506127e0806100206000396000f3fe608060405260043610620001075760003560e01c80635d5d326f1162000095578063bab161bf1162000060578063bab161bf14620003a8578063d02103ca14620003dd578063e737588114620003ff578063ed6be5c9146200043357600080fd5b80635d5d326f14620002ff57806381b1c17414620003245780638624c35c146200035e578063b7e6a7d4146200038357600080fd5b80633ae0504711620000d65780633ae0504714620002065780633da81682146200021e578063508935f814620002545780635a64a1da146200026d57600080fd5b806322e95f2c146200010c5780632dfdf0b5146200014e5780632f3a3d5d1462000175578063318aee3d1462000197575b600080fd5b3480156200011957600080fd5b50620001316200012b36600462000ee5565b6200044a565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156200015b57600080fd5b506200016660415481565b60405190815260200162000145565b3480156200018257600080fd5b5060475462000131906001600160a01b031681565b348015620001a457600080fd5b50620001e1620001b636600462000f21565b60456020526000908152604090205463ffffffff81169064010000000090046001600160a01b031682565b6040805163ffffffff90931683526001600160a01b0390911660208301520162000145565b3480156200021357600080fd5b50620001666200049b565b3480156200022b57600080fd5b50620002436200023d36600462001014565b62000575565b604051901515815260200162000145565b6200026b6200026536600462001082565b62000675565b005b3480156200027a57600080fd5b50620001666200028c3660046200113e565b604080516001600160e01b031960e098891b81166020808401919091526bffffffffffffffffffffffff196060998a1b811660248501529790991b1660388201529390951b909316603c830152605082015260708082019290925282518082039092018252609001909152805191012090565b3480156200030c57600080fd5b506200026b6200031e36600462001238565b620009d4565b3480156200033157600080fd5b5062000131620003433660046200131f565b6044602052600090815260409020546001600160a01b031681565b3480156200036b57600080fd5b506200026b6200037d36600462000ee5565b62000b25565b3480156200039057600080fd5b5062000131620003a236600462000ee5565b62000cbd565b348015620003b557600080fd5b50604254620003c79063ffffffff1681565b60405163ffffffff909116815260200162000145565b348015620003ea57600080fd5b5060465462000131906001600160a01b031681565b3480156200040c57600080fd5b50620002436200041e3660046200131f565b60436020526000908152604090205460ff1681565b3480156200044057600080fd5b50620003c7600081565b60006044600084846040516020016200046592919062001339565b60408051808303601f19018152918152815160209283012083529082019290925201600020546001600160a01b03169392505050565b6041546000908190815b60208110156200056d5781600116600103620005055760018160208110620004d157620004d162001368565b0154604080516020810192909252810184905260600160405160208183030381529060405280519060200120925062000549565b82602182602081106200051c576200051c62001368565b01546040805160208101939093528201526060016040516020818303038152906040528051906020012092505b6200055660028362001394565b9150806200056481620013b7565b915050620004a5565b509092915050565b60008467ffffffffffffffff8416825b6020811015620006685781600116600103620005f257868181518110620005b057620005b062001368565b602002602001015183604051602001620005d4929190918252602082015260400190565b60405160208183030381529060405280519060200120925062000644565b8287828151811062000608576200060862001368565b60200260200101516040516020016200062b929190918252602082015260400190565b6040516020818303038152906040528051906020012092505b6200065160028362001394565b9150806200065f81620013b7565b91505062000585565b5050909114949350505050565b60425463ffffffff90811690861603620006e95760405162461bcd60e51b815260206004820152602a60248201527f4272696467653a3a6272696467653a2044455354494e4154494f4e5f43414e546044820152692fa122afa4aa29a2a62360b11b60648201526084015b60405180910390fd5b60008060606001600160a01b0389166200077057853414620007665760405162461bcd60e51b815260206004820152602f60248201527f4272696467653a3a6272696467653a20414d4f554e545f444f45535f4e4f545f60448201526e4d415443485f4d53475f56414c554560881b6064820152608401620006e0565b6000915062000914565b6001600160a01b03808a16600081815260456020908152604080832081518083018352905463ffffffff80821683526401000000009091049096169281019290925260425481516306fdde0360e01b815291518f99509516965090936306fdde03926004838101939192918290030181865afa158015620007f5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200081f919081019062001406565b8a6001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa1580156200085e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000888919081019062001406565b8b6001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015620008c7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620008ed919062001486565b6040516020016200090193929190620014d9565b6040516020818303038152906040529150505b7ff0b963192bdc6349c23af9bd17294b4c7b9b5a73a2a9939610ea18ffd1c5dc2a82848a8a8a8660415460405162000953979695949392919062001516565b60405180910390a16046546001600160a01b03166333d6247d620009766200049b565b6040518263ffffffff1660e01b81526004016200099591815260200190565b600060405180830381600087803b158015620009b057600080fd5b505af1158015620009c5573d6000803e3d6000fd5b50505050505050505050505050565b63ffffffff891660009081526043602052604090205460ff161562000a3c5760405162461bcd60e51b815260206004820152601e60248201527f4272696467653a3a636c61696d3a20414c52454144595f434c41494d454400006044820152606401620006e0565b63ffffffff89166000908152604360205260409020805460ff191660011790556001600160a01b0385161562000abb576040805163ffffffff881681526001600160a01b038716602082015260008183015290517fccd7715648d1f2bb13e158f96b5b6c3aeda555d4cb87112e274a6f28bc571d599181900360600190a15b6040805163ffffffff8b81168252881660208201526001600160a01b0387811682840152851660608201526080810184905290517f25308c93ceeed162da955b3f7ce3e3f93606579e40fb92029faa9efe275459839181900360a00190a150505050505050505050565b600054610100900460ff161580801562000b465750600054600160ff909116105b8062000b625750303b15801562000b62575060005460ff166001145b62000bc75760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401620006e0565b6000805460ff19166001179055801562000beb576000805461ff0019166101001790555b6042805463ffffffff191663ffffffff8516179055604680546001600160a01b0319166001600160a01b03841617905560405162000c299062000e9a565b604051809103906000f08015801562000c46573d6000803e3d6000fd5b50604780546001600160a01b0319166001600160a01b039290921691909117905562000c7162000d10565b801562000cb8576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b600080838360405160200162000cd592919062001339565b60408051601f19818403018152919052805160209091012060475490915062000d08906001600160a01b03168262000e2c565b949350505050565b600054610100900460ff1662000d7d5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401620006e0565b60005b62000d8e6001602062001578565b81101562000e29576021816020811062000dac5762000dac62001368565b01546021826020811062000dc45762000dc462001368565b015460408051602081019390935282015260600160405160208183030381529060405280519060200120602182600162000dff919062001592565b6020811062000e125762000e1262001368565b01558062000e2081620013b7565b91505062000d80565b50565b600062000e93838330604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b8152606093841b60148201526f5af43d82803e903d91602b57fd5bf3ff60801b6028820152921b6038830152604c8201526037808220606c830152605591012090565b9392505050565b6111fd80620015ae83390190565b803563ffffffff8116811462000ebd57600080fd5b919050565b6001600160a01b038116811462000e2957600080fd5b803562000ebd8162000ec2565b6000806040838503121562000ef957600080fd5b62000f048362000ea8565b9150602083013562000f168162000ec2565b809150509250929050565b60006020828403121562000f3457600080fd5b813562000e938162000ec2565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171562000f835762000f8362000f41565b604052919050565b600082601f83011262000f9d57600080fd5b8135602067ffffffffffffffff82111562000fbc5762000fbc62000f41565b8160051b62000fcd82820162000f57565b928352848101820192828101908785111562000fe857600080fd5b83870192505b84831015620010095782358252918301919083019062000fee565b979650505050505050565b600080600080608085870312156200102b57600080fd5b84359350602085013567ffffffffffffffff808211156200104b57600080fd5b620010598883890162000f8b565b94506040870135915080821682146200107157600080fd5b509396929550929360600135925050565b60008060008060008060a087890312156200109c57600080fd5b8635620010a98162000ec2565b9550620010b96020880162000ea8565b94506040870135620010cb8162000ec2565b935060608701359250608087013567ffffffffffffffff80821115620010f057600080fd5b818901915089601f8301126200110557600080fd5b8135818111156200111557600080fd5b8a60208285010111156200112857600080fd5b6020830194508093505050509295509295509295565b60008060008060008060c087890312156200115857600080fd5b620011638762000ea8565b95506020870135620011758162000ec2565b9450620011856040880162000ea8565b93506060870135620011978162000ec2565b9598949750929560808101359460a0909101359350915050565b600067ffffffffffffffff821115620011ce57620011ce62000f41565b50601f01601f191660200190565b600082601f830112620011ee57600080fd5b813562001205620011ff82620011b1565b62000f57565b8181528460208386010111156200121b57600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000806000806000806000806101408b8d0312156200125957600080fd5b8a3567ffffffffffffffff808211156200127257600080fd5b620012808e838f0162000f8b565b9b506200129060208e0162000ea8565b9a5060408d0135995060608d01359850620012ae60808e0162000ea8565b9750620012be60a08e0162000ed8565b9650620012ce60c08e0162000ea8565b9550620012de60e08e0162000ed8565b94506101008d013593506101208d0135915080821115620012fe57600080fd5b506200130d8d828e01620011dc565b9150509295989b9194979a5092959850565b6000602082840312156200133257600080fd5b5035919050565b60e09290921b6001600160e01b031916825260601b6bffffffffffffffffffffffff1916600482015260180190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082620013b257634e487b7160e01b600052601260045260246000fd5b500490565b600060018201620013cc57620013cc6200137e565b5060010190565b60005b83811015620013f0578181015183820152602001620013d6565b8381111562001400576000848401525b50505050565b6000602082840312156200141957600080fd5b815167ffffffffffffffff8111156200143157600080fd5b8201601f810184136200144357600080fd5b805162001454620011ff82620011b1565b8181528560208385010111156200146a57600080fd5b6200147d826020830160208601620013d3565b95945050505050565b6000602082840312156200149957600080fd5b815160ff8116811462000e9357600080fd5b60008151808452620014c5816020860160208601620013d3565b601f01601f19169290920160200192915050565b606081526000620014ee6060830186620014ab565b8281036020840152620015028186620014ab565b91505060ff83166040830152949350505050565b63ffffffff88811682526001600160a01b0388811660208401528782166040840152861660608301526080820185905260e060a08301819052600091906200156190840186620014ab565b915080841660c08401525098975050505050505050565b6000828210156200158d576200158d6200137e565b500390565b60008219821115620015a857620015a86200137e565b50019056fe608060405234801561001057600080fd5b50600054610100900460ff16158080156100315750600054600160ff909116105b8061005c575061004a3061013260201b61062b1760201c565b15801561005c575060005460ff166001145b6100c35760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b6000805460ff1916600117905580156100e6576000805461ff0019166101001790555b801561012c576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50610141565b6001600160a01b03163b151590565b6110ad806101506000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80636c94522111610097578063a3c573eb11610066578063a3c573eb146101fe578063a457c2d714610229578063a9059cbb1461023c578063dd62ed3e1461024f57600080fd5b80636c945221146101a557806370a08231146101ba57806395d89b41146101e35780639dc29fac146101eb57600080fd5b806323b872dd116100d357806323b872dd1461014d578063313ce56714610160578063395093511461017f57806340c10f191461019257600080fd5b806306fdde03146100fa578063095ea7b31461011857806318160ddd1461013b575b600080fd5b610102610262565b60405161010f9190610c43565b60405180910390f35b61012b610126366004610cb4565b6102f4565b604051901515815260200161010f565b6035545b60405190815260200161010f565b61012b61015b366004610cde565b61030c565b606554600160a01b900460ff1660405160ff909116815260200161010f565b61012b61018d366004610cb4565b610330565b61012b6101a0366004610cb4565b610352565b6101b86101b3366004610dbd565b6103c1565b005b61013f6101c8366004610e52565b6001600160a01b031660009081526033602052604090205490565b610102610507565b61012b6101f9366004610cb4565b610516565b606554610211906001600160a01b031681565b6040516001600160a01b03909116815260200161010f565b61012b610237366004610cb4565b610577565b61012b61024a366004610cb4565b6105f2565b61013f61025d366004610e74565b610600565b60606036805461027190610ea7565b80601f016020809104026020016040519081016040528092919081815260200182805461029d90610ea7565b80156102ea5780601f106102bf576101008083540402835291602001916102ea565b820191906000526020600020905b8154815290600101906020018083116102cd57829003601f168201915b5050505050905090565b60003361030281858561063a565b5060019392505050565b60003361031a85828561075f565b6103258585856107d9565b506001949350505050565b6000336103028185856103438383610600565b61034d9190610ef7565b61063a565b6065546000906001600160a01b031633146103ae5760405162461bcd60e51b8152602060048201526017602482015276546f6b656e577261707065643a4e4f545f42524944474560481b60448201526064015b60405180910390fd5b6103b883836109a7565b50600192915050565b600054610100900460ff16158080156103e15750600054600160ff909116105b806103fb5750303b1580156103fb575060005460ff166001145b61045e5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016103a5565b6000805460ff191660011790558015610481576000805461ff0019166101001790555b61048b8686610a87565b606580546001600160a81b0319163360ff60a01b191617600160a01b60ff8716021790556104b983836109a7565b80156104ff576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050565b60606037805461027190610ea7565b6065546000906001600160a01b0316331461056d5760405162461bcd60e51b8152602060048201526017602482015276546f6b656e577261707065643a4e4f545f42524944474560481b60448201526064016103a5565b6103b88383610ab8565b600033816105858286610600565b9050838110156105e55760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016103a5565b610325828686840361063a565b6000336103028185856107d9565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b6001600160a01b03163b151590565b6001600160a01b03831661069c5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016103a5565b6001600160a01b0382166106fd5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016103a5565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b600061076b8484610600565b905060001981146107d357818110156107c65760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016103a5565b6107d3848484840361063a565b50505050565b6001600160a01b03831661083d5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016103a5565b6001600160a01b03821661089f5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016103a5565b6001600160a01b038316600090815260336020526040902054818110156109175760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016103a5565b6001600160a01b0380851660009081526033602052604080822085850390559185168152908120805484929061094e908490610ef7565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161099a91815260200190565b60405180910390a36107d3565b6001600160a01b0382166109fd5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016103a5565b8060356000828254610a0f9190610ef7565b90915550506001600160a01b03821660009081526033602052604081208054839290610a3c908490610ef7565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35b5050565b600054610100900460ff16610aae5760405162461bcd60e51b81526004016103a590610f0f565b610a838282610c03565b6001600160a01b038216610b185760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016103a5565b6001600160a01b03821660009081526033602052604090205481811015610b8c5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016103a5565b6001600160a01b0383166000908152603360205260408120838303905560358054849290610bbb908490610f5a565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610752565b505050565b600054610100900460ff16610c2a5760405162461bcd60e51b81526004016103a590610f0f565b6036610c368382610fb7565b506037610bfe8282610fb7565b600060208083528351808285015260005b81811015610c7057858101830151858201604001528201610c54565b81811115610c82576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b0381168114610caf57600080fd5b919050565b60008060408385031215610cc757600080fd5b610cd083610c98565b946020939093013593505050565b600080600060608486031215610cf357600080fd5b610cfc84610c98565b9250610d0a60208501610c98565b9150604084013590509250925092565b634e487b7160e01b600052604160045260246000fd5b600082601f830112610d4157600080fd5b813567ffffffffffffffff80821115610d5c57610d5c610d1a565b604051601f8301601f19908116603f01168101908282118183101715610d8457610d84610d1a565b81604052838152866020858801011115610d9d57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080600060a08688031215610dd557600080fd5b853567ffffffffffffffff80821115610ded57600080fd5b610df989838a01610d30565b96506020880135915080821115610e0f57600080fd5b50610e1c88828901610d30565b945050604086013560ff81168114610e3357600080fd5b9250610e4160608701610c98565b949793965091946080013592915050565b600060208284031215610e6457600080fd5b610e6d82610c98565b9392505050565b60008060408385031215610e8757600080fd5b610e9083610c98565b9150610e9e60208401610c98565b90509250929050565b600181811c90821680610ebb57607f821691505b602082108103610edb57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610f0a57610f0a610ee1565b500190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600082821015610f6c57610f6c610ee1565b500390565b601f821115610bfe57600081815260208120601f850160051c81016020861015610f985750805b601f850160051c820191505b818110156104ff57828155600101610fa4565b815167ffffffffffffffff811115610fd157610fd1610d1a565b610fe581610fdf8454610ea7565b84610f71565b602080601f83116001811461101a57600084156110025750858301515b600019600386901b1c1916600185901b1785556104ff565b600085815260208120601f198616915b828110156110495788860151825594840194600190910190840161102a565b50858210156110675787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea264697066735822122055634249b570d8bb59f5775c3db3d749bfa6c77edf142383be4bf3f74c9633fd64736f6c634300080f0033a26469706673582212201e8cdf8e60fd2779bf36713d525607e9a0b1bc0875d0e6efb4a9505bd167789964736f6c634300080f0033",
}

// BridgeABI is the input ABI used to generate the binding from.
// Deprecated: Use BridgeMetaData.ABI instead.
var BridgeABI = BridgeMetaData.ABI

// BridgeBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BridgeMetaData.Bin instead.
var BridgeBin = BridgeMetaData.Bin

// DeployBridge deploys a new Ethereum contract, binding an instance of Bridge to it.
func DeployBridge(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Bridge, error) {
	parsed, err := BridgeMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BridgeBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Bridge{BridgeCaller: BridgeCaller{contract: contract}, BridgeTransactor: BridgeTransactor{contract: contract}, BridgeFilterer: BridgeFilterer{contract: contract}}, nil
}

// Bridge is an auto generated Go binding around an Ethereum contract.
type Bridge struct {
	BridgeCaller     // Read-only binding to the contract
	BridgeTransactor // Write-only binding to the contract
	BridgeFilterer   // Log filterer for contract events
}

// BridgeCaller is an auto generated read-only Go binding around an Ethereum contract.
type BridgeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BridgeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BridgeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BridgeSession struct {
	Contract     *Bridge           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BridgeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BridgeCallerSession struct {
	Contract *BridgeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// BridgeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BridgeTransactorSession struct {
	Contract     *BridgeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BridgeRaw is an auto generated low-level Go binding around an Ethereum contract.
type BridgeRaw struct {
	Contract *Bridge // Generic contract binding to access the raw methods on
}

// BridgeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BridgeCallerRaw struct {
	Contract *BridgeCaller // Generic read-only contract binding to access the raw methods on
}

// BridgeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BridgeTransactorRaw struct {
	Contract *BridgeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBridge creates a new instance of Bridge, bound to a specific deployed contract.
func NewBridge(address common.Address, backend bind.ContractBackend) (*Bridge, error) {
	contract, err := bindBridge(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Bridge{BridgeCaller: BridgeCaller{contract: contract}, BridgeTransactor: BridgeTransactor{contract: contract}, BridgeFilterer: BridgeFilterer{contract: contract}}, nil
}

// NewBridgeCaller creates a new read-only instance of Bridge, bound to a specific deployed contract.
func NewBridgeCaller(address common.Address, caller bind.ContractCaller) (*BridgeCaller, error) {
	contract, err := bindBridge(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeCaller{contract: contract}, nil
}

// NewBridgeTransactor creates a new write-only instance of Bridge, bound to a specific deployed contract.
func NewBridgeTransactor(address common.Address, transactor bind.ContractTransactor) (*BridgeTransactor, error) {
	contract, err := bindBridge(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeTransactor{contract: contract}, nil
}

// NewBridgeFilterer creates a new log filterer instance of Bridge, bound to a specific deployed contract.
func NewBridgeFilterer(address common.Address, filterer bind.ContractFilterer) (*BridgeFilterer, error) {
	contract, err := bindBridge(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BridgeFilterer{contract: contract}, nil
}

// bindBridge binds a generic wrapper to an already deployed contract.
func bindBridge(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BridgeABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Bridge *BridgeRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Bridge.Contract.BridgeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Bridge *BridgeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bridge.Contract.BridgeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Bridge *BridgeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Bridge.Contract.BridgeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Bridge *BridgeCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Bridge.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Bridge *BridgeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bridge.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Bridge *BridgeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Bridge.Contract.contract.Transact(opts, method, params...)
}

// MAINNETNETWORKID is a free data retrieval call binding the contract method 0xed6be5c9.
//
// Solidity: function MAINNET_NETWORK_ID() view returns(uint32)
func (_Bridge *BridgeCaller) MAINNETNETWORKID(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "MAINNET_NETWORK_ID")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// MAINNETNETWORKID is a free data retrieval call binding the contract method 0xed6be5c9.
//
// Solidity: function MAINNET_NETWORK_ID() view returns(uint32)
func (_Bridge *BridgeSession) MAINNETNETWORKID() (uint32, error) {
	return _Bridge.Contract.MAINNETNETWORKID(&_Bridge.CallOpts)
}

// MAINNETNETWORKID is a free data retrieval call binding the contract method 0xed6be5c9.
//
// Solidity: function MAINNET_NETWORK_ID() view returns(uint32)
func (_Bridge *BridgeCallerSession) MAINNETNETWORKID() (uint32, error) {
	return _Bridge.Contract.MAINNETNETWORKID(&_Bridge.CallOpts)
}

// ClaimNullifier is a free data retrieval call binding the contract method 0xe7375881.
//
// Solidity: function claimNullifier(uint256 ) view returns(bool)
func (_Bridge *BridgeCaller) ClaimNullifier(opts *bind.CallOpts, arg0 *big.Int) (bool, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "claimNullifier", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ClaimNullifier is a free data retrieval call binding the contract method 0xe7375881.
//
// Solidity: function claimNullifier(uint256 ) view returns(bool)
func (_Bridge *BridgeSession) ClaimNullifier(arg0 *big.Int) (bool, error) {
	return _Bridge.Contract.ClaimNullifier(&_Bridge.CallOpts, arg0)
}

// ClaimNullifier is a free data retrieval call binding the contract method 0xe7375881.
//
// Solidity: function claimNullifier(uint256 ) view returns(bool)
func (_Bridge *BridgeCallerSession) ClaimNullifier(arg0 *big.Int) (bool, error) {
	return _Bridge.Contract.ClaimNullifier(&_Bridge.CallOpts, arg0)
}

// DepositCount is a free data retrieval call binding the contract method 0x2dfdf0b5.
//
// Solidity: function depositCount() view returns(uint256)
func (_Bridge *BridgeCaller) DepositCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "depositCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DepositCount is a free data retrieval call binding the contract method 0x2dfdf0b5.
//
// Solidity: function depositCount() view returns(uint256)
func (_Bridge *BridgeSession) DepositCount() (*big.Int, error) {
	return _Bridge.Contract.DepositCount(&_Bridge.CallOpts)
}

// DepositCount is a free data retrieval call binding the contract method 0x2dfdf0b5.
//
// Solidity: function depositCount() view returns(uint256)
func (_Bridge *BridgeCallerSession) DepositCount() (*big.Int, error) {
	return _Bridge.Contract.DepositCount(&_Bridge.CallOpts)
}

// GetDepositRoot is a free data retrieval call binding the contract method 0x3ae05047.
//
// Solidity: function getDepositRoot() view returns(bytes32)
func (_Bridge *BridgeCaller) GetDepositRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "getDepositRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetDepositRoot is a free data retrieval call binding the contract method 0x3ae05047.
//
// Solidity: function getDepositRoot() view returns(bytes32)
func (_Bridge *BridgeSession) GetDepositRoot() ([32]byte, error) {
	return _Bridge.Contract.GetDepositRoot(&_Bridge.CallOpts)
}

// GetDepositRoot is a free data retrieval call binding the contract method 0x3ae05047.
//
// Solidity: function getDepositRoot() view returns(bytes32)
func (_Bridge *BridgeCallerSession) GetDepositRoot() ([32]byte, error) {
	return _Bridge.Contract.GetDepositRoot(&_Bridge.CallOpts)
}

// GetLeafValue is a free data retrieval call binding the contract method 0x5a64a1da.
//
// Solidity: function getLeafValue(uint32 originNetwork, address originTokenAddress, uint32 destinationNetwork, address destinationAddress, uint256 amount, bytes32 metadataHash) pure returns(bytes32)
func (_Bridge *BridgeCaller) GetLeafValue(opts *bind.CallOpts, originNetwork uint32, originTokenAddress common.Address, destinationNetwork uint32, destinationAddress common.Address, amount *big.Int, metadataHash [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "getLeafValue", originNetwork, originTokenAddress, destinationNetwork, destinationAddress, amount, metadataHash)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetLeafValue is a free data retrieval call binding the contract method 0x5a64a1da.
//
// Solidity: function getLeafValue(uint32 originNetwork, address originTokenAddress, uint32 destinationNetwork, address destinationAddress, uint256 amount, bytes32 metadataHash) pure returns(bytes32)
func (_Bridge *BridgeSession) GetLeafValue(originNetwork uint32, originTokenAddress common.Address, destinationNetwork uint32, destinationAddress common.Address, amount *big.Int, metadataHash [32]byte) ([32]byte, error) {
	return _Bridge.Contract.GetLeafValue(&_Bridge.CallOpts, originNetwork, originTokenAddress, destinationNetwork, destinationAddress, amount, metadataHash)
}

// GetLeafValue is a free data retrieval call binding the contract method 0x5a64a1da.
//
// Solidity: function getLeafValue(uint32 originNetwork, address originTokenAddress, uint32 destinationNetwork, address destinationAddress, uint256 amount, bytes32 metadataHash) pure returns(bytes32)
func (_Bridge *BridgeCallerSession) GetLeafValue(originNetwork uint32, originTokenAddress common.Address, destinationNetwork uint32, destinationAddress common.Address, amount *big.Int, metadataHash [32]byte) ([32]byte, error) {
	return _Bridge.Contract.GetLeafValue(&_Bridge.CallOpts, originNetwork, originTokenAddress, destinationNetwork, destinationAddress, amount, metadataHash)
}

// GetTokenWrappedAddress is a free data retrieval call binding the contract method 0x22e95f2c.
//
// Solidity: function getTokenWrappedAddress(uint32 originNetwork, address originTokenAddress) view returns(address)
func (_Bridge *BridgeCaller) GetTokenWrappedAddress(opts *bind.CallOpts, originNetwork uint32, originTokenAddress common.Address) (common.Address, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "getTokenWrappedAddress", originNetwork, originTokenAddress)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetTokenWrappedAddress is a free data retrieval call binding the contract method 0x22e95f2c.
//
// Solidity: function getTokenWrappedAddress(uint32 originNetwork, address originTokenAddress) view returns(address)
func (_Bridge *BridgeSession) GetTokenWrappedAddress(originNetwork uint32, originTokenAddress common.Address) (common.Address, error) {
	return _Bridge.Contract.GetTokenWrappedAddress(&_Bridge.CallOpts, originNetwork, originTokenAddress)
}

// GetTokenWrappedAddress is a free data retrieval call binding the contract method 0x22e95f2c.
//
// Solidity: function getTokenWrappedAddress(uint32 originNetwork, address originTokenAddress) view returns(address)
func (_Bridge *BridgeCallerSession) GetTokenWrappedAddress(originNetwork uint32, originTokenAddress common.Address) (common.Address, error) {
	return _Bridge.Contract.GetTokenWrappedAddress(&_Bridge.CallOpts, originNetwork, originTokenAddress)
}

// GlobalExitRootManager is a free data retrieval call binding the contract method 0xd02103ca.
//
// Solidity: function globalExitRootManager() view returns(address)
func (_Bridge *BridgeCaller) GlobalExitRootManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "globalExitRootManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GlobalExitRootManager is a free data retrieval call binding the contract method 0xd02103ca.
//
// Solidity: function globalExitRootManager() view returns(address)
func (_Bridge *BridgeSession) GlobalExitRootManager() (common.Address, error) {
	return _Bridge.Contract.GlobalExitRootManager(&_Bridge.CallOpts)
}

// GlobalExitRootManager is a free data retrieval call binding the contract method 0xd02103ca.
//
// Solidity: function globalExitRootManager() view returns(address)
func (_Bridge *BridgeCallerSession) GlobalExitRootManager() (common.Address, error) {
	return _Bridge.Contract.GlobalExitRootManager(&_Bridge.CallOpts)
}

// NetworkID is a free data retrieval call binding the contract method 0xbab161bf.
//
// Solidity: function networkID() view returns(uint32)
func (_Bridge *BridgeCaller) NetworkID(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "networkID")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// NetworkID is a free data retrieval call binding the contract method 0xbab161bf.
//
// Solidity: function networkID() view returns(uint32)
func (_Bridge *BridgeSession) NetworkID() (uint32, error) {
	return _Bridge.Contract.NetworkID(&_Bridge.CallOpts)
}

// NetworkID is a free data retrieval call binding the contract method 0xbab161bf.
//
// Solidity: function networkID() view returns(uint32)
func (_Bridge *BridgeCallerSession) NetworkID() (uint32, error) {
	return _Bridge.Contract.NetworkID(&_Bridge.CallOpts)
}

// PrecalculatedWrapperAddress is a free data retrieval call binding the contract method 0xb7e6a7d4.
//
// Solidity: function precalculatedWrapperAddress(uint32 originNetwork, address originTokenAddress) view returns(address)
func (_Bridge *BridgeCaller) PrecalculatedWrapperAddress(opts *bind.CallOpts, originNetwork uint32, originTokenAddress common.Address) (common.Address, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "precalculatedWrapperAddress", originNetwork, originTokenAddress)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PrecalculatedWrapperAddress is a free data retrieval call binding the contract method 0xb7e6a7d4.
//
// Solidity: function precalculatedWrapperAddress(uint32 originNetwork, address originTokenAddress) view returns(address)
func (_Bridge *BridgeSession) PrecalculatedWrapperAddress(originNetwork uint32, originTokenAddress common.Address) (common.Address, error) {
	return _Bridge.Contract.PrecalculatedWrapperAddress(&_Bridge.CallOpts, originNetwork, originTokenAddress)
}

// PrecalculatedWrapperAddress is a free data retrieval call binding the contract method 0xb7e6a7d4.
//
// Solidity: function precalculatedWrapperAddress(uint32 originNetwork, address originTokenAddress) view returns(address)
func (_Bridge *BridgeCallerSession) PrecalculatedWrapperAddress(originNetwork uint32, originTokenAddress common.Address) (common.Address, error) {
	return _Bridge.Contract.PrecalculatedWrapperAddress(&_Bridge.CallOpts, originNetwork, originTokenAddress)
}

// TokenImplementation is a free data retrieval call binding the contract method 0x2f3a3d5d.
//
// Solidity: function tokenImplementation() view returns(address)
func (_Bridge *BridgeCaller) TokenImplementation(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "tokenImplementation")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// TokenImplementation is a free data retrieval call binding the contract method 0x2f3a3d5d.
//
// Solidity: function tokenImplementation() view returns(address)
func (_Bridge *BridgeSession) TokenImplementation() (common.Address, error) {
	return _Bridge.Contract.TokenImplementation(&_Bridge.CallOpts)
}

// TokenImplementation is a free data retrieval call binding the contract method 0x2f3a3d5d.
//
// Solidity: function tokenImplementation() view returns(address)
func (_Bridge *BridgeCallerSession) TokenImplementation() (common.Address, error) {
	return _Bridge.Contract.TokenImplementation(&_Bridge.CallOpts)
}

// TokenInfoToWrappedToken is a free data retrieval call binding the contract method 0x81b1c174.
//
// Solidity: function tokenInfoToWrappedToken(bytes32 ) view returns(address)
func (_Bridge *BridgeCaller) TokenInfoToWrappedToken(opts *bind.CallOpts, arg0 [32]byte) (common.Address, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "tokenInfoToWrappedToken", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// TokenInfoToWrappedToken is a free data retrieval call binding the contract method 0x81b1c174.
//
// Solidity: function tokenInfoToWrappedToken(bytes32 ) view returns(address)
func (_Bridge *BridgeSession) TokenInfoToWrappedToken(arg0 [32]byte) (common.Address, error) {
	return _Bridge.Contract.TokenInfoToWrappedToken(&_Bridge.CallOpts, arg0)
}

// TokenInfoToWrappedToken is a free data retrieval call binding the contract method 0x81b1c174.
//
// Solidity: function tokenInfoToWrappedToken(bytes32 ) view returns(address)
func (_Bridge *BridgeCallerSession) TokenInfoToWrappedToken(arg0 [32]byte) (common.Address, error) {
	return _Bridge.Contract.TokenInfoToWrappedToken(&_Bridge.CallOpts, arg0)
}

// VerifyMerkleProof is a free data retrieval call binding the contract method 0x3da81682.
//
// Solidity: function verifyMerkleProof(bytes32 leafHash, bytes32[] smtProof, uint64 index, bytes32 root) pure returns(bool)
func (_Bridge *BridgeCaller) VerifyMerkleProof(opts *bind.CallOpts, leafHash [32]byte, smtProof [][32]byte, index uint64, root [32]byte) (bool, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "verifyMerkleProof", leafHash, smtProof, index, root)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// VerifyMerkleProof is a free data retrieval call binding the contract method 0x3da81682.
//
// Solidity: function verifyMerkleProof(bytes32 leafHash, bytes32[] smtProof, uint64 index, bytes32 root) pure returns(bool)
func (_Bridge *BridgeSession) VerifyMerkleProof(leafHash [32]byte, smtProof [][32]byte, index uint64, root [32]byte) (bool, error) {
	return _Bridge.Contract.VerifyMerkleProof(&_Bridge.CallOpts, leafHash, smtProof, index, root)
}

// VerifyMerkleProof is a free data retrieval call binding the contract method 0x3da81682.
//
// Solidity: function verifyMerkleProof(bytes32 leafHash, bytes32[] smtProof, uint64 index, bytes32 root) pure returns(bool)
func (_Bridge *BridgeCallerSession) VerifyMerkleProof(leafHash [32]byte, smtProof [][32]byte, index uint64, root [32]byte) (bool, error) {
	return _Bridge.Contract.VerifyMerkleProof(&_Bridge.CallOpts, leafHash, smtProof, index, root)
}

// WrappedTokenToTokenInfo is a free data retrieval call binding the contract method 0x318aee3d.
//
// Solidity: function wrappedTokenToTokenInfo(address ) view returns(uint32 originNetwork, address originTokenAddress)
func (_Bridge *BridgeCaller) WrappedTokenToTokenInfo(opts *bind.CallOpts, arg0 common.Address) (struct {
	OriginNetwork      uint32
	OriginTokenAddress common.Address
}, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "wrappedTokenToTokenInfo", arg0)

	outstruct := new(struct {
		OriginNetwork      uint32
		OriginTokenAddress common.Address
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.OriginNetwork = *abi.ConvertType(out[0], new(uint32)).(*uint32)
	outstruct.OriginTokenAddress = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)

	return *outstruct, err

}

// WrappedTokenToTokenInfo is a free data retrieval call binding the contract method 0x318aee3d.
//
// Solidity: function wrappedTokenToTokenInfo(address ) view returns(uint32 originNetwork, address originTokenAddress)
func (_Bridge *BridgeSession) WrappedTokenToTokenInfo(arg0 common.Address) (struct {
	OriginNetwork      uint32
	OriginTokenAddress common.Address
}, error) {
	return _Bridge.Contract.WrappedTokenToTokenInfo(&_Bridge.CallOpts, arg0)
}

// WrappedTokenToTokenInfo is a free data retrieval call binding the contract method 0x318aee3d.
//
// Solidity: function wrappedTokenToTokenInfo(address ) view returns(uint32 originNetwork, address originTokenAddress)
func (_Bridge *BridgeCallerSession) WrappedTokenToTokenInfo(arg0 common.Address) (struct {
	OriginNetwork      uint32
	OriginTokenAddress common.Address
}, error) {
	return _Bridge.Contract.WrappedTokenToTokenInfo(&_Bridge.CallOpts, arg0)
}

// Bridge is a paid mutator transaction binding the contract method 0x508935f8.
//
// Solidity: function bridge(address token, uint32 destinationNetwork, address destinationAddress, uint256 amount, bytes permitData) payable returns()
func (_Bridge *BridgeTransactor) Bridge(opts *bind.TransactOpts, token common.Address, destinationNetwork uint32, destinationAddress common.Address, amount *big.Int, permitData []byte) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "bridge", token, destinationNetwork, destinationAddress, amount, permitData)
}

// Bridge is a paid mutator transaction binding the contract method 0x508935f8.
//
// Solidity: function bridge(address token, uint32 destinationNetwork, address destinationAddress, uint256 amount, bytes permitData) payable returns()
func (_Bridge *BridgeSession) Bridge(token common.Address, destinationNetwork uint32, destinationAddress common.Address, amount *big.Int, permitData []byte) (*types.Transaction, error) {
	return _Bridge.Contract.Bridge(&_Bridge.TransactOpts, token, destinationNetwork, destinationAddress, amount, permitData)
}

// Bridge is a paid mutator transaction binding the contract method 0x508935f8.
//
// Solidity: function bridge(address token, uint32 destinationNetwork, address destinationAddress, uint256 amount, bytes permitData) payable returns()
func (_Bridge *BridgeTransactorSession) Bridge(token common.Address, destinationNetwork uint32, destinationAddress common.Address, amount *big.Int, permitData []byte) (*types.Transaction, error) {
	return _Bridge.Contract.Bridge(&_Bridge.TransactOpts, token, destinationNetwork, destinationAddress, amount, permitData)
}

// Claim is a paid mutator transaction binding the contract method 0x5d5d326f.
//
// Solidity: function claim(bytes32[] smtProof, uint32 index, bytes32 mainnetExitRoot, bytes32 rollupExitRoot, uint32 originNetwork, address originTokenAddress, uint32 destinationNetwork, address destinationAddress, uint256 amount, bytes metadata) returns()
func (_Bridge *BridgeTransactor) Claim(opts *bind.TransactOpts, smtProof [][32]byte, index uint32, mainnetExitRoot [32]byte, rollupExitRoot [32]byte, originNetwork uint32, originTokenAddress common.Address, destinationNetwork uint32, destinationAddress common.Address, amount *big.Int, metadata []byte) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "claim", smtProof, index, mainnetExitRoot, rollupExitRoot, originNetwork, originTokenAddress, destinationNetwork, destinationAddress, amount, metadata)
}

// Claim is a paid mutator transaction binding the contract method 0x5d5d326f.
//
// Solidity: function claim(bytes32[] smtProof, uint32 index, bytes32 mainnetExitRoot, bytes32 rollupExitRoot, uint32 originNetwork, address originTokenAddress, uint32 destinationNetwork, address destinationAddress, uint256 amount, bytes metadata) returns()
func (_Bridge *BridgeSession) Claim(smtProof [][32]byte, index uint32, mainnetExitRoot [32]byte, rollupExitRoot [32]byte, originNetwork uint32, originTokenAddress common.Address, destinationNetwork uint32, destinationAddress common.Address, amount *big.Int, metadata []byte) (*types.Transaction, error) {
	return _Bridge.Contract.Claim(&_Bridge.TransactOpts, smtProof, index, mainnetExitRoot, rollupExitRoot, originNetwork, originTokenAddress, destinationNetwork, destinationAddress, amount, metadata)
}

// Claim is a paid mutator transaction binding the contract method 0x5d5d326f.
//
// Solidity: function claim(bytes32[] smtProof, uint32 index, bytes32 mainnetExitRoot, bytes32 rollupExitRoot, uint32 originNetwork, address originTokenAddress, uint32 destinationNetwork, address destinationAddress, uint256 amount, bytes metadata) returns()
func (_Bridge *BridgeTransactorSession) Claim(smtProof [][32]byte, index uint32, mainnetExitRoot [32]byte, rollupExitRoot [32]byte, originNetwork uint32, originTokenAddress common.Address, destinationNetwork uint32, destinationAddress common.Address, amount *big.Int, metadata []byte) (*types.Transaction, error) {
	return _Bridge.Contract.Claim(&_Bridge.TransactOpts, smtProof, index, mainnetExitRoot, rollupExitRoot, originNetwork, originTokenAddress, destinationNetwork, destinationAddress, amount, metadata)
}

// Initialize is a paid mutator transaction binding the contract method 0x8624c35c.
//
// Solidity: function initialize(uint32 _networkID, address _globalExitRootManager) returns()
func (_Bridge *BridgeTransactor) Initialize(opts *bind.TransactOpts, _networkID uint32, _globalExitRootManager common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "initialize", _networkID, _globalExitRootManager)
}

// Initialize is a paid mutator transaction binding the contract method 0x8624c35c.
//
// Solidity: function initialize(uint32 _networkID, address _globalExitRootManager) returns()
func (_Bridge *BridgeSession) Initialize(_networkID uint32, _globalExitRootManager common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.Initialize(&_Bridge.TransactOpts, _networkID, _globalExitRootManager)
}

// Initialize is a paid mutator transaction binding the contract method 0x8624c35c.
//
// Solidity: function initialize(uint32 _networkID, address _globalExitRootManager) returns()
func (_Bridge *BridgeTransactorSession) Initialize(_networkID uint32, _globalExitRootManager common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.Initialize(&_Bridge.TransactOpts, _networkID, _globalExitRootManager)
}

// BridgeBridgeEventIterator is returned from FilterBridgeEvent and is used to iterate over the raw logs and unpacked data for BridgeEvent events raised by the Bridge contract.
type BridgeBridgeEventIterator struct {
	Event *BridgeBridgeEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeBridgeEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeBridgeEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeBridgeEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeBridgeEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeBridgeEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeBridgeEvent represents a BridgeEvent event raised by the Bridge contract.
type BridgeBridgeEvent struct {
	OriginNetwork      uint32
	OriginTokenAddress common.Address
	DestinationNetwork uint32
	DestinationAddress common.Address
	Amount             *big.Int
	Metadata           []byte
	DepositCount       uint32
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterBridgeEvent is a free log retrieval operation binding the contract event 0xf0b963192bdc6349c23af9bd17294b4c7b9b5a73a2a9939610ea18ffd1c5dc2a.
//
// Solidity: event BridgeEvent(uint32 originNetwork, address originTokenAddress, uint32 destinationNetwork, address destinationAddress, uint256 amount, bytes metadata, uint32 depositCount)
func (_Bridge *BridgeFilterer) FilterBridgeEvent(opts *bind.FilterOpts) (*BridgeBridgeEventIterator, error) {

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "BridgeEvent")
	if err != nil {
		return nil, err
	}
	return &BridgeBridgeEventIterator{contract: _Bridge.contract, event: "BridgeEvent", logs: logs, sub: sub}, nil
}

// WatchBridgeEvent is a free log subscription operation binding the contract event 0xf0b963192bdc6349c23af9bd17294b4c7b9b5a73a2a9939610ea18ffd1c5dc2a.
//
// Solidity: event BridgeEvent(uint32 originNetwork, address originTokenAddress, uint32 destinationNetwork, address destinationAddress, uint256 amount, bytes metadata, uint32 depositCount)
func (_Bridge *BridgeFilterer) WatchBridgeEvent(opts *bind.WatchOpts, sink chan<- *BridgeBridgeEvent) (event.Subscription, error) {

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "BridgeEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeBridgeEvent)
				if err := _Bridge.contract.UnpackLog(event, "BridgeEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBridgeEvent is a log parse operation binding the contract event 0xf0b963192bdc6349c23af9bd17294b4c7b9b5a73a2a9939610ea18ffd1c5dc2a.
//
// Solidity: event BridgeEvent(uint32 originNetwork, address originTokenAddress, uint32 destinationNetwork, address destinationAddress, uint256 amount, bytes metadata, uint32 depositCount)
func (_Bridge *BridgeFilterer) ParseBridgeEvent(log types.Log) (*BridgeBridgeEvent, error) {
	event := new(BridgeBridgeEvent)
	if err := _Bridge.contract.UnpackLog(event, "BridgeEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeClaimEventIterator is returned from FilterClaimEvent and is used to iterate over the raw logs and unpacked data for ClaimEvent events raised by the Bridge contract.
type BridgeClaimEventIterator struct {
	Event *BridgeClaimEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeClaimEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeClaimEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeClaimEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeClaimEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeClaimEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeClaimEvent represents a ClaimEvent event raised by the Bridge contract.
type BridgeClaimEvent struct {
	Index              uint32
	OriginNetwork      uint32
	OriginTokenAddress common.Address
	DestinationAddress common.Address
	Amount             *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterClaimEvent is a free log retrieval operation binding the contract event 0x25308c93ceeed162da955b3f7ce3e3f93606579e40fb92029faa9efe27545983.
//
// Solidity: event ClaimEvent(uint32 index, uint32 originNetwork, address originTokenAddress, address destinationAddress, uint256 amount)
func (_Bridge *BridgeFilterer) FilterClaimEvent(opts *bind.FilterOpts) (*BridgeClaimEventIterator, error) {

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "ClaimEvent")
	if err != nil {
		return nil, err
	}
	return &BridgeClaimEventIterator{contract: _Bridge.contract, event: "ClaimEvent", logs: logs, sub: sub}, nil
}

// WatchClaimEvent is a free log subscription operation binding the contract event 0x25308c93ceeed162da955b3f7ce3e3f93606579e40fb92029faa9efe27545983.
//
// Solidity: event ClaimEvent(uint32 index, uint32 originNetwork, address originTokenAddress, address destinationAddress, uint256 amount)
func (_Bridge *BridgeFilterer) WatchClaimEvent(opts *bind.WatchOpts, sink chan<- *BridgeClaimEvent) (event.Subscription, error) {

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "ClaimEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeClaimEvent)
				if err := _Bridge.contract.UnpackLog(event, "ClaimEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseClaimEvent is a log parse operation binding the contract event 0x25308c93ceeed162da955b3f7ce3e3f93606579e40fb92029faa9efe27545983.
//
// Solidity: event ClaimEvent(uint32 index, uint32 originNetwork, address originTokenAddress, address destinationAddress, uint256 amount)
func (_Bridge *BridgeFilterer) ParseClaimEvent(log types.Log) (*BridgeClaimEvent, error) {
	event := new(BridgeClaimEvent)
	if err := _Bridge.contract.UnpackLog(event, "ClaimEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the Bridge contract.
type BridgeInitializedIterator struct {
	Event *BridgeInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeInitialized represents a Initialized event raised by the Bridge contract.
type BridgeInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Bridge *BridgeFilterer) FilterInitialized(opts *bind.FilterOpts) (*BridgeInitializedIterator, error) {

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &BridgeInitializedIterator{contract: _Bridge.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Bridge *BridgeFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *BridgeInitialized) (event.Subscription, error) {

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeInitialized)
				if err := _Bridge.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Bridge *BridgeFilterer) ParseInitialized(log types.Log) (*BridgeInitialized, error) {
	event := new(BridgeInitialized)
	if err := _Bridge.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeNewWrappedTokenIterator is returned from FilterNewWrappedToken and is used to iterate over the raw logs and unpacked data for NewWrappedToken events raised by the Bridge contract.
type BridgeNewWrappedTokenIterator struct {
	Event *BridgeNewWrappedToken // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeNewWrappedTokenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeNewWrappedToken)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeNewWrappedToken)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeNewWrappedTokenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeNewWrappedTokenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeNewWrappedToken represents a NewWrappedToken event raised by the Bridge contract.
type BridgeNewWrappedToken struct {
	OriginNetwork       uint32
	OriginTokenAddress  common.Address
	WrappedTokenAddress common.Address
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterNewWrappedToken is a free log retrieval operation binding the contract event 0xccd7715648d1f2bb13e158f96b5b6c3aeda555d4cb87112e274a6f28bc571d59.
//
// Solidity: event NewWrappedToken(uint32 originNetwork, address originTokenAddress, address wrappedTokenAddress)
func (_Bridge *BridgeFilterer) FilterNewWrappedToken(opts *bind.FilterOpts) (*BridgeNewWrappedTokenIterator, error) {

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "NewWrappedToken")
	if err != nil {
		return nil, err
	}
	return &BridgeNewWrappedTokenIterator{contract: _Bridge.contract, event: "NewWrappedToken", logs: logs, sub: sub}, nil
}

// WatchNewWrappedToken is a free log subscription operation binding the contract event 0xccd7715648d1f2bb13e158f96b5b6c3aeda555d4cb87112e274a6f28bc571d59.
//
// Solidity: event NewWrappedToken(uint32 originNetwork, address originTokenAddress, address wrappedTokenAddress)
func (_Bridge *BridgeFilterer) WatchNewWrappedToken(opts *bind.WatchOpts, sink chan<- *BridgeNewWrappedToken) (event.Subscription, error) {

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "NewWrappedToken")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeNewWrappedToken)
				if err := _Bridge.contract.UnpackLog(event, "NewWrappedToken", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewWrappedToken is a log parse operation binding the contract event 0xccd7715648d1f2bb13e158f96b5b6c3aeda555d4cb87112e274a6f28bc571d59.
//
// Solidity: event NewWrappedToken(uint32 originNetwork, address originTokenAddress, address wrappedTokenAddress)
func (_Bridge *BridgeFilterer) ParseNewWrappedToken(log types.Log) (*BridgeNewWrappedToken, error) {
	event := new(BridgeNewWrappedToken)
	if err := _Bridge.contract.UnpackLog(event, "NewWrappedToken", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
