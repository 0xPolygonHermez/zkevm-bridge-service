/**
* Bridge service.
**/

syntax = "proto3";
package bridge.v1;

import "google/api/annotations.proto";

option go_package = "github.com/0xPolygonHermez/zkevm-bridge-service/bridgetree/pb";

service BridgeService {
    // Getters
    /// Get api version
    rpc CheckAPI(CheckAPIRequest) returns (CheckAPIResponse) {
        option (google.api.http) = {
            get: "/api"
        };
    }

    /// Get bridges for the destination address both in L1 and L2
    rpc GetBridges(GetBridgesRequest) returns (GetBridgesResponse) {
        option (google.api.http) = {
            get: "/bridges/{dest_addr}"
        };
    }

    /// Get the merkle proof for the specific deposit
    rpc GetProof(GetProofRequest) returns (GetProofResponse) {
        option (google.api.http) = {
            get: "/merkle-proof"
        };
    }

    /// Get the specific deposit
    rpc GetBridge(GetBridgeRequest) returns (GetBridgeResponse) {
        option (google.api.http) = {
            get: "/bridge"
        };
    }

    /// Get claims for the specific smart contract address both in L1 and L2
    rpc GetClaims(GetClaimsRequest) returns (GetClaimsResponse) {
        option (google.api.http) = {
            get: "/claims/{dest_addr}"
        };
    }

    /// Get token wrapped for the specific smart contract address both in L1 and L2
    rpc GetTokenWrapped(GetTokenWrappedRequest) returns (GetTokenWrappedResponse) {
        option (google.api.http) = {
            get: "/tokenwrapped"
        };
    }
}

// TokenWrapped message
message TokenWrapped {
    uint32 orig_net = 1;
    string original_token_addr = 2;
    string wrapped_token_addr = 3;
    uint32 network_id = 4;
    string name = 5;
    string symbol = 6;
    uint32 decimals = 7;
}

// Deposit message
message Deposit {
    uint32 leaf_type = 1;
    uint32 orig_net = 2;
    string orig_addr = 3;
    string amount = 4;
    uint32 dest_net = 5;
    string dest_addr = 6;
    uint64 block_num = 7;
    uint64 deposit_cnt = 8;
    uint32 network_id = 9;
    string tx_hash = 10;
    string claim_tx_hash = 11;
    string metadata = 12;
    bool   ready_for_claim = 13;
}

// Claim message
message Claim {
    uint64 index = 1;
    uint32 orig_net = 2;
    string orig_addr = 3;
    string amount = 4;
    uint32 network_id = 5;
    string dest_addr = 6;
    uint64 block_num = 7;
    string tx_hash = 8;
}

// Merkle Proof message
message Proof {
    repeated string merkle_proof = 1;
    string main_exit_root = 2;
    string rollup_exit_root = 3;
}

// Get requests

message CheckAPIRequest {}

message GetBridgesRequest {
    string dest_addr = 1;
    uint64 offset = 2;
    uint32 limit = 3;
}

message GetProofRequest {
    uint32 net_id = 1;
    uint64 deposit_cnt = 2;
}

message GetTokenWrappedRequest {
    string orig_token_addr = 1;
    uint32 orig_net = 2;
}

message GetBridgeRequest {
    uint32 net_id = 1;
    uint64 deposit_cnt = 2;
}

message GetClaimsRequest {
    string dest_addr = 1;
    uint64 offset = 2;
    uint32 limit = 3;
}

// Get responses

message CheckAPIResponse {
    string api = 1;
}

message GetBridgesResponse {
    repeated Deposit deposits = 1;
    uint64 total_cnt = 2;
}

message GetProofResponse {
    Proof proof = 1;
}

message GetTokenWrappedResponse {
    TokenWrapped tokenwrapped = 1;
}

message GetBridgeResponse {
    Deposit deposit = 1;
}

message GetClaimsResponse {
    repeated Claim claims = 1;
    uint64 total_cnt = 2;
}
