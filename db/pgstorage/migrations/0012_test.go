package migrations_test

import (
	"database/sql"
	"testing"

	"github.com/stretchr/testify/assert"
)

type migrationTest0012 struct{}

const (
	initialInsertSQL = `
		INSERT INTO sync.exit_root
		(block_id, global_exit_root, exit_roots)
		VALUES(1, decode('717E05DE47A87A7D1679E183F1C224150675F6302B7DA4EAAB526B2B91AE0761','hex'), '{decode(''5C7830303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030'',''hex''),decode(''5C7832376165356261303864373239316339366338636264646363313438626634386136643638633739373462393433353666353337353465663631373164373537'',''hex'')}');
		INSERT INTO sync.exit_root
		(block_id, global_exit_root, exit_roots)
		VALUES(5, decode('3FB985977CDE5D64E1579F17E55F1C5C346335969053E9D879E59035A48DAE0F','hex'), '{decode(''5C7838356636613362316238383961333263393739333334363962306438613636643634376439353864623463326661623532663638636361383139346633363133'',''hex''),decode(''5C7832376165356261303864373239316339366338636264646363313438626634386136643638633739373462393433353666353337353465663631373164373537'',''hex'')}');
		INSERT INTO sync.exit_root
		(block_id, global_exit_root, exit_roots)
		VALUES(6, decode('739666C7E4A5A2A3F96A0FAD10D2FE6BF92E332C8D6F82501D0075D8072CAF61','hex'), '{decode(''5C7864633663663334353439343739366564613863376439633335363164626164383033656539343466363337386130333361373266353231653831393063346131'',''hex''),decode(''5C7832376165356261303864373239316339366338636264646363313438626634386136643638633739373462393433353666353337353465663631373164373537'',''hex'')}');
		INSERT INTO sync.exit_root
		(block_id, global_exit_root, exit_roots)
		VALUES(7, decode('B60DF164428EF67624205078CDB74DD55308871CA1B8EED09F0372B87061CDE5','hex'), '{decode(''5C7833333638393438613133383866623564303662303230613333376262643732663238313662633533376338663230373632336639663161363132333337366361'',''hex''),decode(''5C7832376165356261303864373239316339366338636264646363313438626634386136643638633739373462393433353666353337353465663631373164373537'',''hex'')}');
		INSERT INTO sync.exit_root
		(block_id, global_exit_root, exit_roots)
		VALUES(8, decode('A31D7BCB797E2EFA7172F1B068E8CA29DC48EAD6091E57B3BF877EECA21A7A59','hex'), '{decode(''5C7832636438363562623761356635356465373537643236623630643434333965336465626265373962333061396436633936393238613839353639373163366432'',''hex''),decode(''5C7832376165356261303864373239316339366338636264646363313438626634386136643638633739373462393433353666353337353465663631373164373537'',''hex'')}');
		INSERT INTO sync.exit_root
		(block_id, global_exit_root, exit_roots)
		VALUES(0, decode('3FB985977CDE5D64E1579F17E55F1C5C346335969053E9D879E59035A48DAE0F','hex'), '{decode(''5C7838356636613362316238383961333263393739333334363962306438613636643634376439353864623463326661623532663638636361383139346633363133'',''hex''),decode(''5C7832376165356261303864373239316339366338636264646363313438626634386136643638633739373462393433353666353337353465663631373164373537'',''hex'')}');
	`
	insertBlocks = `INSERT INTO sync.block (id, block_num, block_hash, parent_hash, network_id, received_at) VALUES(1, 2803824, decode('27474F16174BBE50C294FE13C190B92E42B2368A6D4AEB8A4A015F52816296C2','hex'), decode('C9B5033799ADF3739383A0489EFBE8A0D4D5E4478778A4F4304562FD51AE4C07','hex'), 1, '0001-01-01 01:00:00.000');
		INSERT INTO sync.block (id, block_num, block_hash, parent_hash, network_id, received_at) VALUES(5, 2803824, decode('27474F16174BBE50C294FE13C190B92E42B2368A6D4AEB8A4A015F52816296C3','hex'), decode('C9B5033799ADF3739383A0489EFBE8A0D4D5E4478778A4F4304562FD51AE4C07','hex'), 1, '0001-01-01 01:00:00.000');
		INSERT INTO sync.block (id, block_num, block_hash, parent_hash, network_id, received_at) VALUES(6, 2803824, decode('27474F16174BBE50C294FE13C190B92E42B2368A6D4AEB8A4A015F52816296C4','hex'), decode('C9B5033799ADF3739383A0489EFBE8A0D4D5E4478778A4F4304562FD51AE4C07','hex'), 1, '0001-01-01 01:00:00.000');
		INSERT INTO sync.block (id, block_num, block_hash, parent_hash, network_id, received_at) VALUES(7, 2803824, decode('27474F16174BBE50C294FE13C190B92E42B2368A6D4AEB8A4A015F52816296C5','hex'), decode('C9B5033799ADF3739383A0489EFBE8A0D4D5E4478778A4F4304562FD51AE4C07','hex'), 1, '0001-01-01 01:00:00.000');
		INSERT INTO sync.block (id, block_num, block_hash, parent_hash, network_id, received_at) VALUES(8, 2803824, decode('27474F16174BBE50C294FE13C190B92E42B2368A6D4AEB8A4A015F52816296C6','hex'), decode('C9B5033799ADF3739383A0489EFBE8A0D4D5E4478778A4F4304562FD51AE4C07','hex'), 1, '0001-01-01 01:00:00.000');
	`
)

func (m migrationTest0012) InsertData(db *sql.DB) error {
	if _, err := db.Exec(insertBlocks); err != nil {
		return err
	}
	if _, err := db.Exec(initialInsertSQL); err != nil {
		return err
	}
	return nil
}

func (m migrationTest0012) RunAssertsAfterMigrationUp(t *testing.T, db *sql.DB) {
	selectBlockID := `SELECT count(*) FROM sync.exit_root where block_id = 0;`
	var count int
	err := db.QueryRow(selectBlockID).Scan(&count)
	assert.NoError(t, err)
	assert.Equal(t, 0, count)

	selectNetworkID := `SELECT network_id FROM sync.exit_root where block_id = 1;`
	err = db.QueryRow(selectNetworkID).Scan(&count)
	assert.NoError(t, err)
	assert.Equal(t, 0, count)

	insertGER := `INSERT INTO sync.exit_root
		(block_id, global_exit_root, exit_roots, network_id)
		VALUES(5, decode('3FB985977CDE5D64E1579F17E55F1C5C346335969053E9D879E59035A48DAE0A','hex'), '{decode(''5C7838356636613362316238383961333263393739333334363962306438613636643634376439353864623463326661623532663638636361383139346633363133'',''hex''),decode(''5C7832376165356261303864373239316339366338636264646363313438626634386136643638633739373462393433353666353337353465663631373164373537'',''hex'')}', 1);
	`
	_, err = db.Exec(insertGER)
	assert.NoError(t, err)

	selectNetworkID = `SELECT network_id FROM sync.exit_root where block_id = 5 AND network_id = 1;`
	err = db.QueryRow(selectNetworkID).Scan(&count)
	assert.NoError(t, err)
	assert.Equal(t, 1, count)

	insertTrustedGER := `INSERT INTO sync.exit_root
		(block_id, global_exit_root, exit_roots, network_id)
		VALUES(0, decode('BA95503878F0B150C40DE1F47536598315A020398A1F4FD61831E740FED25E3A','hex'), '{decode(''5C7834376463646439656133303936633866366335326363363961616566663830343361616431353032643232383639656664646664666435313635613233313638'',''hex''),decode(''5C7861316336343137643833393536396530613738663636636435363836656433623436343464613466613964373664396665636662653061376534646465383630'',''hex'')}', 2);
	`
	_, err = db.Exec(insertTrustedGER)
	assert.NoError(t, err)
	insertTrustedGER2 := `INSERT INTO sync.exit_root
		(block_id, global_exit_root, exit_roots, network_id)
		VALUES(0, decode('BA95503878F0B150C40DE1F47536598315A020398A1F4FD61831E740FED25E3A','hex'), '{decode(''5C7834376463646439656133303936633866366335326363363961616566663830343361616431353032643232383639656664646664666435313635613233313638'',''hex''),decode(''5C7861316336343137643833393536396530613738663636636435363836656433623436343464613466613964373664396665636662653061376534646465383630'',''hex'')}', 2);
	`
	_, err = db.Exec(insertTrustedGER2)
	assert.Error(t, err)
	insertTrustedGER3 := `INSERT INTO sync.exit_root
		(block_id, global_exit_root, exit_roots, network_id)
		VALUES(0, decode('BA95503878F0B150C40DE1F47536598315A020398A1F4FD61831E740FED25E3A','hex'), '{decode(''5C7834376463646439656133303936633866366335326363363961616566663830343361616431353032643232383639656664646664666435313635613233313638'',''hex''),decode(''5C7861316336343137643833393536396530613738663636636435363836656433623436343464613466613964373664396665636662653061376534646465383630'',''hex'')}', 3);
	`
	_, err = db.Exec(insertTrustedGER3)
	assert.NoError(t, err)
	emptyGERTable := `DELETE FROM sync.exit_root;`
	_, err = db.Exec(emptyGERTable)
	assert.NoError(t, err)
}

func (m migrationTest0012) RunAssertsAfterMigrationDown(t *testing.T, db *sql.DB) {
	selectBlockID := `SELECT count(*) FROM sync.exit_root where block_id = 0;`
	var count int
	err := db.QueryRow(selectBlockID).Scan(&count)
	assert.NoError(t, err)
	assert.Equal(t, 0, count)

	selectNetworkID := `SELECT network_id FROM sync.exit_root where block_id = 1;`
	err = db.QueryRow(selectNetworkID).Scan(&count)
	assert.Error(t, err)

	insertGER := `INSERT INTO sync.exit_root
		(id, block_id, global_exit_root, exit_roots, network_id)
		VALUES(11, 5, decode('3FB985977CDE5D64E1579F17E55F1C5C346335969053E9D879E59035A48DAE0B','hex'), '{decode(''5C7838356636613362316238383961333263393739333334363962306438613636643634376439353864623463326661623532663638636361383139346633363133'',''hex''),decode(''5C7832376165356261303864373239316339366338636264646363313438626634386136643638633739373462393433353666353337353465663631373164373537'',''hex'')}', 1);
	`
	_, err = db.Exec(insertGER)
	assert.Error(t, err)

	insertTrustedGER := `INSERT INTO sync.exit_root
		(block_id, global_exit_root, exit_roots, network_id)
		VALUES(0, decode('BA95503878F0B150C40DE1F47536598315A020398A1F4FD61831E740FED25E3A','hex'), '{decode(''5C7834376463646439656133303936633866366335326363363961616566663830343361616431353032643232383639656664646664666435313635613233313638'',''hex''),decode(''5C7861316336343137643833393536396530613738663636636435363836656433623436343464613466613964373664396665636662653061376534646465383630'',''hex'')}', 2);
	`
	_, err = db.Exec(insertTrustedGER)
	assert.Error(t, err)
	insertTrustedGER2 := `INSERT INTO sync.exit_root
		(block_id, global_exit_root, exit_roots)
		VALUES(0, decode('BA95503878F0B150C40DE1F47536598315A020398A1F4FD61831E740FED25E3A','hex'), '{decode(''5C7834376463646439656133303936633866366335326363363961616566663830343361616431353032643232383639656664646664666435313635613233313638'',''hex''),decode(''5C7861316336343137643833393536396530613738663636636435363836656433623436343464613466613964373664396665636662653061376534646465383630'',''hex'')}');
	`
	_, err = db.Exec(insertTrustedGER2)
	assert.NoError(t, err)
	insertTrustedGER3 := `INSERT INTO sync.exit_root
		(block_id, global_exit_root, exit_roots)
		VALUES(0, decode('BA95503878F0B150C40DE1F47536598315A020398A1F4FD61831E740FED25E3A','hex'), '{decode(''5C7834376463646439656133303936633866366335326363363961616566663830343361616431353032643232383639656664646664666435313635613233313638'',''hex''),decode(''5C7861316336343137643833393536396530613738663636636435363836656433623436343464613466613964373664396665636662653061376534646465383630'',''hex'')}');
	`
	_, err = db.Exec(insertTrustedGER3)
	assert.Error(t, err)
	insertTrustedGER4 := `INSERT INTO sync.exit_root
		(block_id, global_exit_root, exit_roots)
		VALUES(0, decode('BA95503878F0B150C40DE1F47536598315A020398A1F4FD61831E740FED25E3B','hex'), '{decode(''5C7834376463646439656133303936633866366335326363363961616566663830343361616431353032643232383639656664646664666435313635613233313638'',''hex''),decode(''5C7861316336343137643833393536396530613738663636636435363836656433623436343464613466613964373664396665636662653061376534646465383630'',''hex'')}');
	`
	_, err = db.Exec(insertTrustedGER4)
	assert.NoError(t, err)
}

func TestMigration0012(t *testing.T) {
	runMigrationTest(t, 12, migrationTest0012{})
}
