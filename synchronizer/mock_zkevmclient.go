// Code generated by mockery. DO NOT EDIT.

package synchronizer

import (
	context "context"

	common "github.com/ethereum/go-ethereum/common"

	mock "github.com/stretchr/testify/mock"

	types "github.com/0xPolygonHermez/zkevm-node/jsonrpc/types"
)

// zkEVMClientMock is an autogenerated mock type for the zkEVMClientInterface type
type zkEVMClientMock struct {
	mock.Mock
}

type zkEVMClientMock_Expecter struct {
	mock *mock.Mock
}

func (_m *zkEVMClientMock) EXPECT() *zkEVMClientMock_Expecter {
	return &zkEVMClientMock_Expecter{mock: &_m.Mock}
}

// ExitRootsByGER provides a mock function with given fields: ctx, globalExitRoot
func (_m *zkEVMClientMock) ExitRootsByGER(ctx context.Context, globalExitRoot common.Hash) (*types.ExitRoots, error) {
	ret := _m.Called(ctx, globalExitRoot)

	if len(ret) == 0 {
		panic("no return value specified for ExitRootsByGER")
	}

	var r0 *types.ExitRoots
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, common.Hash) (*types.ExitRoots, error)); ok {
		return rf(ctx, globalExitRoot)
	}
	if rf, ok := ret.Get(0).(func(context.Context, common.Hash) *types.ExitRoots); ok {
		r0 = rf(ctx, globalExitRoot)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ExitRoots)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, common.Hash) error); ok {
		r1 = rf(ctx, globalExitRoot)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// zkEVMClientMock_ExitRootsByGER_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExitRootsByGER'
type zkEVMClientMock_ExitRootsByGER_Call struct {
	*mock.Call
}

// ExitRootsByGER is a helper method to define mock.On call
//   - ctx context.Context
//   - globalExitRoot common.Hash
func (_e *zkEVMClientMock_Expecter) ExitRootsByGER(ctx interface{}, globalExitRoot interface{}) *zkEVMClientMock_ExitRootsByGER_Call {
	return &zkEVMClientMock_ExitRootsByGER_Call{Call: _e.mock.On("ExitRootsByGER", ctx, globalExitRoot)}
}

func (_c *zkEVMClientMock_ExitRootsByGER_Call) Run(run func(ctx context.Context, globalExitRoot common.Hash)) *zkEVMClientMock_ExitRootsByGER_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(common.Hash))
	})
	return _c
}

func (_c *zkEVMClientMock_ExitRootsByGER_Call) Return(_a0 *types.ExitRoots, _a1 error) *zkEVMClientMock_ExitRootsByGER_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *zkEVMClientMock_ExitRootsByGER_Call) RunAndReturn(run func(context.Context, common.Hash) (*types.ExitRoots, error)) *zkEVMClientMock_ExitRootsByGER_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestGlobalExitRoot provides a mock function with given fields: ctx
func (_m *zkEVMClientMock) GetLatestGlobalExitRoot(ctx context.Context) (common.Hash, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestGlobalExitRoot")
	}

	var r0 common.Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (common.Hash, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) common.Hash); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// zkEVMClientMock_GetLatestGlobalExitRoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestGlobalExitRoot'
type zkEVMClientMock_GetLatestGlobalExitRoot_Call struct {
	*mock.Call
}

// GetLatestGlobalExitRoot is a helper method to define mock.On call
//   - ctx context.Context
func (_e *zkEVMClientMock_Expecter) GetLatestGlobalExitRoot(ctx interface{}) *zkEVMClientMock_GetLatestGlobalExitRoot_Call {
	return &zkEVMClientMock_GetLatestGlobalExitRoot_Call{Call: _e.mock.On("GetLatestGlobalExitRoot", ctx)}
}

func (_c *zkEVMClientMock_GetLatestGlobalExitRoot_Call) Run(run func(ctx context.Context)) *zkEVMClientMock_GetLatestGlobalExitRoot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *zkEVMClientMock_GetLatestGlobalExitRoot_Call) Return(_a0 common.Hash, _a1 error) *zkEVMClientMock_GetLatestGlobalExitRoot_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *zkEVMClientMock_GetLatestGlobalExitRoot_Call) RunAndReturn(run func(context.Context) (common.Hash, error)) *zkEVMClientMock_GetLatestGlobalExitRoot_Call {
	_c.Call.Return(run)
	return _c
}

// newZkEVMClientMock creates a new instance of zkEVMClientMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newZkEVMClientMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *zkEVMClientMock {
	mock := &zkEVMClientMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
