// Code generated by mockery v2.28.1. DO NOT EDIT.

package synchronizer

import (
	context "context"

	common "github.com/ethereum/go-ethereum/common"

	mock "github.com/stretchr/testify/mock"

	types "github.com/0xPolygonHermez/zkevm-node/jsonrpc/types"
)

// zkEVMClientMock is an autogenerated mock type for the zkEVMClientInterface type
type zkEVMClientMock struct {
	mock.Mock
}

// ExitRootsByGER provides a mock function with given fields: ctx, globalExitRoot
func (_m *zkEVMClientMock) ExitRootsByGER(ctx context.Context, globalExitRoot common.Hash) (*types.ExitRoots, error) {
	ret := _m.Called(ctx, globalExitRoot)

	var r0 *types.ExitRoots
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, common.Hash) (*types.ExitRoots, error)); ok {
		return rf(ctx, globalExitRoot)
	}
	if rf, ok := ret.Get(0).(func(context.Context, common.Hash) *types.ExitRoots); ok {
		r0 = rf(ctx, globalExitRoot)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ExitRoots)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, common.Hash) error); ok {
		r1 = rf(ctx, globalExitRoot)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatestGlobalExitRoot provides a mock function with given fields: ctx
func (_m *zkEVMClientMock) GetLatestGlobalExitRoot(ctx context.Context) (common.Hash, error) {
	ret := _m.Called(ctx)

	var r0 common.Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (common.Hash, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) common.Hash); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTnewZkEVMClientMock interface {
	mock.TestingT
	Cleanup(func())
}

// newZkEVMClientMock creates a new instance of zkEVMClientMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newZkEVMClientMock(t mockConstructorTestingTnewZkEVMClientMock) *zkEVMClientMock {
	mock := &zkEVMClientMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
