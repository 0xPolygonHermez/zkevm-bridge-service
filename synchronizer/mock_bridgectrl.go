// Code generated by mockery v2.39.0. DO NOT EDIT.

package synchronizer

import (
	context "context"

	etherman "github.com/0xPolygonHermez/zkevm-bridge-service/etherman"
	mock "github.com/stretchr/testify/mock"

	pgx "github.com/jackc/pgx/v4"
)

// bridgectrlMock is an autogenerated mock type for the bridgectrlInterface type
type bridgectrlMock struct {
	mock.Mock
}

// AddDeposit provides a mock function with given fields: ctx, deposit, depositID, dbTx
func (_m *bridgectrlMock) AddDeposit(ctx context.Context, deposit *etherman.Deposit, depositID uint64, dbTx pgx.Tx) error {
	ret := _m.Called(ctx, deposit, depositID, dbTx)

	if len(ret) == 0 {
		panic("no return value specified for AddDeposit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *etherman.Deposit, uint64, pgx.Tx) error); ok {
		r0 = rf(ctx, deposit, depositID, dbTx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddRollupExitLeaf provides a mock function with given fields: ctx, rollupLeaf, dbTx
func (_m *bridgectrlMock) AddRollupExitLeaf(ctx context.Context, rollupLeaf etherman.RollupExitLeaf, dbTx pgx.Tx) error {
	ret := _m.Called(ctx, rollupLeaf, dbTx)

	if len(ret) == 0 {
		panic("no return value specified for AddRollupExitLeaf")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, etherman.RollupExitLeaf, pgx.Tx) error); ok {
		r0 = rf(ctx, rollupLeaf, dbTx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetNetworkID provides a mock function with given fields: networkID
func (_m *bridgectrlMock) GetNetworkID(networkID uint) (uint8, error) {
	ret := _m.Called(networkID)

	if len(ret) == 0 {
		panic("no return value specified for GetNetworkID")
	}

	var r0 uint8
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (uint8, error)); ok {
		return rf(networkID)
	}
	if rf, ok := ret.Get(0).(func(uint) uint8); ok {
		r0 = rf(networkID)
	} else {
		r0 = ret.Get(0).(uint8)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(networkID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReorgMT provides a mock function with given fields: ctx, depositCount, networkID, dbTx
func (_m *bridgectrlMock) ReorgMT(ctx context.Context, depositCount uint, networkID uint, dbTx pgx.Tx) error {
	ret := _m.Called(ctx, depositCount, networkID, dbTx)

	if len(ret) == 0 {
		panic("no return value specified for ReorgMT")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, uint, pgx.Tx) error); ok {
		r0 = rf(ctx, depositCount, networkID, dbTx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// newBridgectrlMock creates a new instance of bridgectrlMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newBridgectrlMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *bridgectrlMock {
	mock := &bridgectrlMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
