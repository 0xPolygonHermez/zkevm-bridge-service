// Code generated by mockery. DO NOT EDIT.

package synchronizer

import (
	context "context"

	etherman "github.com/0xPolygonHermez/zkevm-bridge-service/etherman"
	mock "github.com/stretchr/testify/mock"

	pgx "github.com/jackc/pgx/v4"
)

// bridgectrlMock is an autogenerated mock type for the bridgectrlInterface type
type bridgectrlMock struct {
	mock.Mock
}

type bridgectrlMock_Expecter struct {
	mock *mock.Mock
}

func (_m *bridgectrlMock) EXPECT() *bridgectrlMock_Expecter {
	return &bridgectrlMock_Expecter{mock: &_m.Mock}
}

// AddDeposit provides a mock function with given fields: ctx, deposit, depositID, dbTx
func (_m *bridgectrlMock) AddDeposit(ctx context.Context, deposit *etherman.Deposit, depositID uint64, dbTx pgx.Tx) error {
	ret := _m.Called(ctx, deposit, depositID, dbTx)

	if len(ret) == 0 {
		panic("no return value specified for AddDeposit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *etherman.Deposit, uint64, pgx.Tx) error); ok {
		r0 = rf(ctx, deposit, depositID, dbTx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// bridgectrlMock_AddDeposit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddDeposit'
type bridgectrlMock_AddDeposit_Call struct {
	*mock.Call
}

// AddDeposit is a helper method to define mock.On call
//   - ctx context.Context
//   - deposit *etherman.Deposit
//   - depositID uint64
//   - dbTx pgx.Tx
func (_e *bridgectrlMock_Expecter) AddDeposit(ctx interface{}, deposit interface{}, depositID interface{}, dbTx interface{}) *bridgectrlMock_AddDeposit_Call {
	return &bridgectrlMock_AddDeposit_Call{Call: _e.mock.On("AddDeposit", ctx, deposit, depositID, dbTx)}
}

func (_c *bridgectrlMock_AddDeposit_Call) Run(run func(ctx context.Context, deposit *etherman.Deposit, depositID uint64, dbTx pgx.Tx)) *bridgectrlMock_AddDeposit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*etherman.Deposit), args[2].(uint64), args[3].(pgx.Tx))
	})
	return _c
}

func (_c *bridgectrlMock_AddDeposit_Call) Return(_a0 error) *bridgectrlMock_AddDeposit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *bridgectrlMock_AddDeposit_Call) RunAndReturn(run func(context.Context, *etherman.Deposit, uint64, pgx.Tx) error) *bridgectrlMock_AddDeposit_Call {
	_c.Call.Return(run)
	return _c
}

// AddRollupExitLeaf provides a mock function with given fields: ctx, rollupLeaf, dbTx
func (_m *bridgectrlMock) AddRollupExitLeaf(ctx context.Context, rollupLeaf etherman.RollupExitLeaf, dbTx pgx.Tx) error {
	ret := _m.Called(ctx, rollupLeaf, dbTx)

	if len(ret) == 0 {
		panic("no return value specified for AddRollupExitLeaf")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, etherman.RollupExitLeaf, pgx.Tx) error); ok {
		r0 = rf(ctx, rollupLeaf, dbTx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// bridgectrlMock_AddRollupExitLeaf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddRollupExitLeaf'
type bridgectrlMock_AddRollupExitLeaf_Call struct {
	*mock.Call
}

// AddRollupExitLeaf is a helper method to define mock.On call
//   - ctx context.Context
//   - rollupLeaf etherman.RollupExitLeaf
//   - dbTx pgx.Tx
func (_e *bridgectrlMock_Expecter) AddRollupExitLeaf(ctx interface{}, rollupLeaf interface{}, dbTx interface{}) *bridgectrlMock_AddRollupExitLeaf_Call {
	return &bridgectrlMock_AddRollupExitLeaf_Call{Call: _e.mock.On("AddRollupExitLeaf", ctx, rollupLeaf, dbTx)}
}

func (_c *bridgectrlMock_AddRollupExitLeaf_Call) Run(run func(ctx context.Context, rollupLeaf etherman.RollupExitLeaf, dbTx pgx.Tx)) *bridgectrlMock_AddRollupExitLeaf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(etherman.RollupExitLeaf), args[2].(pgx.Tx))
	})
	return _c
}

func (_c *bridgectrlMock_AddRollupExitLeaf_Call) Return(_a0 error) *bridgectrlMock_AddRollupExitLeaf_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *bridgectrlMock_AddRollupExitLeaf_Call) RunAndReturn(run func(context.Context, etherman.RollupExitLeaf, pgx.Tx) error) *bridgectrlMock_AddRollupExitLeaf_Call {
	_c.Call.Return(run)
	return _c
}

// GetNetworkID provides a mock function with given fields: networkID
func (_m *bridgectrlMock) GetNetworkID(networkID uint) (uint8, error) {
	ret := _m.Called(networkID)

	if len(ret) == 0 {
		panic("no return value specified for GetNetworkID")
	}

	var r0 uint8
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (uint8, error)); ok {
		return rf(networkID)
	}
	if rf, ok := ret.Get(0).(func(uint) uint8); ok {
		r0 = rf(networkID)
	} else {
		r0 = ret.Get(0).(uint8)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(networkID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// bridgectrlMock_GetNetworkID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNetworkID'
type bridgectrlMock_GetNetworkID_Call struct {
	*mock.Call
}

// GetNetworkID is a helper method to define mock.On call
//   - networkID uint
func (_e *bridgectrlMock_Expecter) GetNetworkID(networkID interface{}) *bridgectrlMock_GetNetworkID_Call {
	return &bridgectrlMock_GetNetworkID_Call{Call: _e.mock.On("GetNetworkID", networkID)}
}

func (_c *bridgectrlMock_GetNetworkID_Call) Run(run func(networkID uint)) *bridgectrlMock_GetNetworkID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *bridgectrlMock_GetNetworkID_Call) Return(_a0 uint8, _a1 error) *bridgectrlMock_GetNetworkID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *bridgectrlMock_GetNetworkID_Call) RunAndReturn(run func(uint) (uint8, error)) *bridgectrlMock_GetNetworkID_Call {
	_c.Call.Return(run)
	return _c
}

// ReorgMT provides a mock function with given fields: ctx, depositCount, networkID, dbTx
func (_m *bridgectrlMock) ReorgMT(ctx context.Context, depositCount uint, networkID uint, dbTx pgx.Tx) error {
	ret := _m.Called(ctx, depositCount, networkID, dbTx)

	if len(ret) == 0 {
		panic("no return value specified for ReorgMT")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, uint, pgx.Tx) error); ok {
		r0 = rf(ctx, depositCount, networkID, dbTx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// bridgectrlMock_ReorgMT_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReorgMT'
type bridgectrlMock_ReorgMT_Call struct {
	*mock.Call
}

// ReorgMT is a helper method to define mock.On call
//   - ctx context.Context
//   - depositCount uint
//   - networkID uint
//   - dbTx pgx.Tx
func (_e *bridgectrlMock_Expecter) ReorgMT(ctx interface{}, depositCount interface{}, networkID interface{}, dbTx interface{}) *bridgectrlMock_ReorgMT_Call {
	return &bridgectrlMock_ReorgMT_Call{Call: _e.mock.On("ReorgMT", ctx, depositCount, networkID, dbTx)}
}

func (_c *bridgectrlMock_ReorgMT_Call) Run(run func(ctx context.Context, depositCount uint, networkID uint, dbTx pgx.Tx)) *bridgectrlMock_ReorgMT_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint), args[2].(uint), args[3].(pgx.Tx))
	})
	return _c
}

func (_c *bridgectrlMock_ReorgMT_Call) Return(_a0 error) *bridgectrlMock_ReorgMT_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *bridgectrlMock_ReorgMT_Call) RunAndReturn(run func(context.Context, uint, uint, pgx.Tx) error) *bridgectrlMock_ReorgMT_Call {
	_c.Call.Return(run)
	return _c
}

// newBridgectrlMock creates a new instance of bridgectrlMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newBridgectrlMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *bridgectrlMock {
	mock := &bridgectrlMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
